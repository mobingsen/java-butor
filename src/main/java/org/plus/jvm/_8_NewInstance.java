package org.plus.jvm;

/**
 * 10 | Java对象的内存布局
 *
 * 创建对象的方式：
 *  1.new 语句
 *  2.反射机制
 *  3.Object.clone 方法
 *  4.反序列化
 *  5.Unsafe.allocateInstance 方法
 *  其中，Object.clone 方法和反序列化通过直接复制已有的数据，来初始化新建对象的实例字段。Unsafe.allocateInstance 方法则没有初始化实例
 *  字段，而 new 语句和反射机制，则是通过调用构造器来初始化实例字段。
 *
 * 在 Java 虚拟机中，每个 Java 对象都有一个对象头（object header），这个由标记字段和类型指针所构成。其中，标记字段用以存储 Java 虚拟机
 * 有关该对象的运行数据，如哈希码、GC 信息以及锁信息，而类型指针则指向该对象的类。
 *
 * 在 64 位的 Java 虚拟机中，对象头的标记字段占 64 位，而类型指针又占了 64 位。也就是说，每一个 Java 对象在内存中的额外开销就是 16 个字节。
 * 为了尽量较少对象的内存使用量，64 位 Java 虚拟机引入了压缩指针 [1] 的概念（对应虚拟机选项 -XX:+UseCompressedOops，默认开启），将堆
 * 中原本 64 位的 Java 对象指针压缩成 32 位的。
 * 内存对齐（对应虚拟机选项 -XX:ObjectAlignmentInBytes，默认值为 8）。
 *
 * 默认情况下，Java 虚拟机堆中对象的起始地址需要对齐至 8 的倍数。如果一个对象用不到 8N 个字节，那么空白的那部分空间就浪费掉了。这些浪费掉
 * 的空间我们称之为对象间的填充（padding）。在默认情况下，Java 虚拟机中的 32 位压缩指针可以寻址到 2 的 35 次方个字节，也就是 32GB 的地
 * 址空间（超过 32GB 则会关闭压缩指针）。在对压缩指针解引用时，我们需要将其左移 3 位，再加上一个固定偏移量，便可以得到能够寻址 32GB 地址
 * 空间的伪 64 位指针了。
 * Java 虚拟机要求 long 字段、double 字段，以及非压缩指针状态下的引用字段地址为 8 的倍数。
 * 字段内存对齐的其中一个原因，是让字段只出现在同一 CPU 的缓存行中。如果字段不是对齐的，那么就有可能出现跨缓存行的字段。也就是说，该字段的
 * 读取可能需要替换两个缓存行，而该字段的存储也会同时污染两个缓存行。这两种情况对程序的执行效率而言都是不利的。
 *
 * Java 虚拟机中字段重排列有三种排列方法（对应 Java 虚拟机选项 -XX:FieldsAllocationStyle，默认值为 1），但都会遵循如下两个规则。
 * 其一，如果一个字段占据 C 个字节，那么该字段的偏移量需要对齐至 NC。这里偏移量指的是字段地址与对象的起始地址差值。
 * 以 long 类为例，它仅有一个 long 类型的实例字段。在使用了压缩指针的 64 位虚拟机中，尽管对象头的大小为 12 个字节，该 long 类型字段的偏
 * 移量也只能是 16，而中间空着的 4 个字节便会被浪费掉。
 * 其二，子类所继承字段的偏移量，需要与父类对应字段的偏移量保持一致。
 * 在具体实现中，Java 虚拟机还会对齐子类字段的起始位置。对于使用了压缩指针的 64 位虚拟机，子类第一个字段需要对齐至 4N；而对于关闭了压缩指
 * 针的 64 位虚拟机，子类第一个字段则需要对齐至 8N。
 *
 * Java 8 还引入了一个新的注释 @Contended，用来解决对象字段之间的虚共享（false sharing）。虚共享是怎么回事呢？假设两个线程分别访问同一
 * 对象中不同的 volatile 字段，逻辑上它们并没有共享内容，因此不需要同步。然而，如果这两个字段恰好在同一个缓存行中，那么对这些字段的写操作
 * 会导致缓存行的写回，也就造成了实质上的共享。Java 虚拟机会让不同的 @Contended 字段处于独立的缓存行中，因此你会看到大量的空间被浪费掉。
 * 来查阅 Contended 字段的内存布局。注意使用虚拟机选项 -XX:-RestrictContended。如果你在 Java 9 以上版本试验的话，在使用 javac 编译
 * 时需要添加 --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAME
 * JOL 工具，来打印你工程中的类的字段分布情况。
 * curl -L -O http://central.maven.org/maven2/org/openjdk/jol/jol-cli/0.9/jol-cli-0.9-full.jar
 * java -cp jol-cli-0.9-full.jar org.openjdk.jol.Main internals java.lang.String
 *
 * Created by mobingsen on 2020/7/29 17:35
 */
public class _8_NewInstance {
}
